// CppInternalResource
//
// Copyright (C) 2021, Max Goddard.
// All rights reserved.
//

#include <iostream>
#include <fstream>
#include <sstream>

std::string get_safe_file_name(const std::string_view file_path) {
    constexpr std::string_view valid_characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_";

    size_t last_path_index = file_path.find_last_of("/\\");
    size_t extension_index = file_path.find_last_of('.');

    last_path_index = (last_path_index == std::string::npos) ? 0 : last_path_index + 1;

    std::string file_name(file_path.substr(last_path_index, extension_index - last_path_index));

    for (char& c : file_name) {
        if (valid_characters.find(c) == std::string::npos) {
            c = '_';
        }
    }

    return file_name;
}

int main(int argc, char** argv) {
    if (argc > 1) {
        std::string file = argv[1];
        std::string file_name = get_safe_file_name(file);

        std::ifstream in_file(file);

        if (!in_file.is_open()) {
            std::cout << "Invalid first parameter: File does not exist." << std::endl;
        } else {
            std::stringstream sstr;
            sstr << in_file.rdbuf();
            std::string data(sstr.str());
            size_t data_size = data.size();

            std::ofstream out_file(file + ".hpp");

            out_file << "// INTERNAL RESOURCE HEADER" << '\n';
            out_file << "// Generated by the CppInternalResource tool by Max Goddard." << '\n';
            out_file << '\n';
            out_file << "#pragma once" << '\n';
            out_file << '\n';
            out_file << "#include <array>" << '\n';
            out_file << "" << '\n';
            out_file << "namespace internal_resource {" << '\n';
            out_file << "    constexpr size_t " << file_name << "_size = " << data_size << ";" << '\n';
            out_file << "    std::array<uint8_t, " << file_name << "_size>& get_" << file_name << "() noexcept {" << '\n';
            out_file << "        static std::array<uint8_t, " << file_name << "_size> data {" << '\n';
            out_file << "            " << std::hex;

            constexpr size_t max_row_elements = 16;

            size_t row_step = 0;

            for (char c : data) {
                out_file << "0x" << (c & 0xFF) << ", ";

                ++row_step;

                if (row_step == max_row_elements) {
                    row_step = 0;
                    out_file << "\n            ";
                }
            }

            if (row_step != 0 || data_size == 0) {
                out_file << '\n';
            }

            out_file << "        };" << '\n';
            out_file << '\n';
            out_file << "        return data;" << '\n';
            out_file << "    }" << '\n';
            out_file << "}" << '\n';
            out_file << std::endl;
        }
    } else {
        std::cout << "Missing first parameter: Input file not specified." << std::endl;
    }

    return 0;
}
